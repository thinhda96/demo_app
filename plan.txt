Plan:1) In the `plot.py` file, add a new function `plot_spending_money_per_month` inside the `Plot` class to generate the spending money per month chart:```python@staticmethoddef plot_spending_money_per_month(data: list) -> Any:    df = pd.DataFrame(data, columns=['transaction_date', 'transaction_amount'])    df['transaction_amount'] = pd.to_numeric(df['transaction_amount'])    monthly_totals = df.groupby(pd.Grouper(key='transaction_date', freq='M')).sum()    fig, ax = plt.subplots(figsize=(10, 6))    monthly_totals.plot(kind='bar', ax=ax)    ax.set_title('Spending Money per Month')    ax.set_xlabel('Month')    ax.set_ylabel('Spending Amount')    return fig```2) In the `database.py` file, add a new function `fetch_spending_money_per_month` inside the `Database` class to fetch the required data:```pythondef fetch_spending_money_per_month(self) -> list:    cnx = self._connect()    cursor = cnx.cursor()    query = """    SELECT transaction_date, transaction_amount    FROM transactions    """    cursor.execute(query)    data = cursor.fetchall()    cursor.close()    cnx.close()    return data```3) In the `app.py` file, add a new function `plot_spending_money_per_month_chart` to display the chart:```pythondef plot_spending_money_per_month_chart():    spending_data = db_instance.fetch_spending_money_per_month()    chart = plot_instance.plot_spending_money_per_month(spending_data)    st.pyplot(chart)```4) In the `app.py` file, call the new function `plot_spending_money_per_month_chart` in the main part of the app:```pythonif __name__ == "__main__":    # ... (existing code)    st.write('---')    # show spending money per month chart    plot_spending_money_per_month_chart()    # ... (existing code)```This will display the new chart without breaking existing functionalities.